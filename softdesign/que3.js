// JavaScript Document
que3=[{ans:2,que:'下列何者為結構化分析(Structured Analysis)最常採用的工具？',ans1:'結構圖(Structure Charts)',ans2:'資料流程圖(Data-FlowDiagrams)',ans3:'流程圖(Flow Charts)',ans4:'物件圖(Object Diagrams)。',img:'' },
{ans:1,que:'程式說明文件是用來詳細說明程式之設計方法、處理邏輯與輸出入資料格式等；在程式說明文件中，下列何者對系統設計師最為重要？',ans1:'程式流程圖',ans2:'程式內容',ans3:'螢幕設計及說明',ans4:'程式修改狀況單。',img:'' },
{ans:4,que:'一個良好的程式規格書中，應包含許多規格之描述，若是某程式之目的是在於維護資料以供輸入使用，則必須在規格書中包含畫面之欄位說明與控制；下列何者不包含於畫面之欄位說明與控制之文件中？',ans1:'畫面中各種欄位之來源或去處之變數名稱與意義',ans2:'各個欄位之檢核條件與限制',ans3:'各個欄位之編輯型態表現與屬性',ans4:'程式畫面處理之邏輯程序。',img:'' },
{ans:3,que:'一個好的程式，均會在程式起始位置上置放一標題。在標題註解區中，應包含何種資訊？A.程式名稱B.設計者C.完成日期、修改日期D.開發時間E.使用人員F.使用檔案名稱G.內容處理概述H.使用部門',ans1:'A,B,C,E,F,G,H',ans2:'A,B,C,D,F,G',ans3:'A,B,C,F,G',ans4:'A,B,C,D,E,F,G,H。',img:'' },
{ans:4,que:'下列何者常用於系統分析時，在資料分析階段用以確認沒有其他事物被忽略？',ans1:'資料流程圖',ans2:'組織圖',ans3:'甘特圖',ans4:'決策表。',img:'' },
{ans:3,que:'下列何者非測試計劃之內容？',ans1:'測試規格要求',ans2:'測試資料型態',ans3:'測試對象選擇',ans4:'測試預期結果。',img:'' },
{ans:3,que:'下列何者可提供在程式說明書中，程式模組在異動作業時，維持資料的一致性？',ans1:'資料檔案結構表',ans2:'處理程序與介面描述',ans3:'檔案與程式對應關係',ans4:'檔案與資料對應關係。',img:'' },
{ans:4,que:'下列何者對程式說明文件之敘述有誤？',ans1:'具有溝通意見的功能',ans2:'具有品質管制的功能',ans3:'具有經驗累積、新手學習的功能',ans4:'具有修改程式的功能。',img:'' },
{ans:3,que:'在程式內每段程式碼加上一些註解，何者為多餘的？',ans1:'此段程式碼資料處理的方式',ans2:'此段程式碼的例外情形處理方式',ans3:'整個程式的目的、功能',ans4:'此段程式碼若用到GOTO 時以結構化方式描述，加強了解程式走向。',img:'' },
{ans:3,que:'關於註釋(Comments)的說明，以下何者不正確？',ans1:'註釋依其解釋的範圍，可分為標頭註釋和功能註釋',ans2:'標頭註釋使用在每一個程式單元的最前頭，用來說明該程式單元的功能',ans3:'註釋的說明數量應該愈多愈好，以提高程式的可讀性',ans4:'優良的程式碼(Source Code)本身就是最好的說明文件，所以應取用適當的變數名稱，適當的縮排，使程式具有自我詮釋(Self-Commented)的效果。',img:'' },
{ans:3,que:'在程式說明文件中，HIPO(Hierarchy Plus Input Process Output)圖用來表示程式之架構及功能，其中一種VTOC(Visual Table of Contents)如下，係表示一個具有三層模組之程式，下列有關模組a～j 之編號，何者正確？',ans1:'a=000, b=001, c=002, c=003',ans2:'a=001, b=010, e=011, f=012',ans3:'a=000, c=200, d=300, j=320',ans4:'a=000, b=010, e=100,f=200。',img:'3-11.jpg' },
{ans:1,que:'對於程式文件的編寫，下列何者有誤？',ans1:'對於程式的執行效率無所助益，因此不須浪費時間去編寫',ans2:'好的程式文件可減少程式維護時所花的時間',ans3:'讓程式文件與應用程式同在，是程式設計人員的職業道德',ans4:'程式文件必須隨著程式的修改而修改。',img:'' },
{ans:2,que:'下列何者非功能註釋(Functional Comments)之特性？',ans1:'只描述每一段落的原始程式，而非逐行註釋',ans2:'逐行註釋',ans3:'註釋採用內縮方式',ans4:'註釋須正確說明。',img:'' },
{ans:3,que:'流程圖多用來描述軟體程序，請問方塊、菱形、箭號各在流程圖中代表何種工作？',ans1:'邏輯狀況、處理步驟、控制流程',ans2:'控制流程、邏輯狀況、處理步驟',ans3:'處理步驟、邏輯狀況、控制流程',ans4:'處理步驟、控制流程、邏輯狀況。',img:'' },
{ans:4,que:'當程式設計師完成程式設計後需撰寫程式說明書。下列何者非程式說明書中之項目？',ans1:'處理邏輯',ans2:'程式維護記錄',ans3:'流程圖',ans4:'原始憑證。',img:'' },
{ans:4,que:'程式說明書主要對作業程式提供功能性之說明。下列何者非程式說明書中之項目？',ans1:'描述輸入程式的資料檔',ans2:'描述程式的輸出',ans3:'處理說明',ans4:'使用語言說明。',img:'' },
{ans:1,que:'若系統設計師完成軟體之設計後，可以何種方法將設計理念傳達給程式設計師以撰寫正確的程式？',ans1:'虛擬碼(Pseudo Code)',ans2:'系統流程圖',ans3:'使用者手冊',ans4:'需求文件。',img:'' },
{ans:3,que:'應用系統開發完成後，必須編寫程式文件，下列何者對程式說明文件之敘述有誤？',ans1:'方便系統的維護',ans2:'利於系統的移交',ans3:'可以提高系統的價值',ans4:'提高系統的可讀性。',img:'' },
{ans:4,que:'下列何者非程式說明書中之項目？',ans1:'程式概要',ans2:'程式規範書',ans3:'原始程式清單',ans4:'系統概述。',img:'' },
{ans:4,que:'程式說明書之使用對象為何？',ans1:'系統分析師',ans2:'程式設計師',ans3:'電腦操作員',ans4:'系統設計及維護人員。',img:'' },
{ans:1,que:'下列何項不適於列在系統使用手冊中？',ans1:'系統效益評估',ans2:'系統的主要功能',ans3:'線上輸入作業程序',ans4:'異常狀態的處理程序。',img:'' },
{ans:1,que:'下列何者不是系統整合測試的目的？',ans1:'測試系統的美觀性',ans2:'測試系統的穩定性',ans3:'測試系統能否正常運作',ans4:'測試系統是否有缺失。',img:'' },
{ans:3,que:'根據軟體工程理論，軟體測試過程有四個步驟，其順序為何？',ans1:'單元測試、整合測試、驗收測試、系統測試',ans2:'整合測試、系統測試、單元測試、驗收測試',ans3:'單元測試、整合測試、系統測試、驗收測試',ans4:'整合測試、單元測試、驗收測試、系統測試。',img:'' },
{ans:2,que:'系統使用手冊應如何充分描述該系統所具有的功能及基本使用方法？',ans1:'儘量使用電腦專用術語',ans2:'使用一般文詞',ans3:'使用程式流程圖',ans4:'使用程式語言。',img:'' },
{ans:4,que:'下列何者不屬於系統發展及功能描述的說明文件？',ans1:'操作手冊',ans2:'設計文件',ans3:'維護手冊',ans4:'程式撰寫要訣。',img:'' },
{ans:4,que:'下列何者不屬於系統使用手冊的目的？',ans1:'當要做系統修改時的參考',ans2:'方便了解系統及使用系統',ans3:'系統與使用者之間的橋樑',ans4:'藉由手冊，使用者自行修改系統，毋需向原程式設計者溝通。',img:'' },
{ans:3,que:'下列那一項不是造成軟體危機原因？',ans1:'軟體複雜度太高',ans2:'使用者需求很混淆',ans3:'電腦價格太高',ans4:'缺乏一套專案管理的方法。',img:'' },
{ans:3,que:'下列何者非系統使用手冊之內容？',ans1:'說明如何使用程式或軟體',ans2:'說明錯誤訊息及其意義',ans3:'說明程式之設計邏輯',ans4:'說明解決疑難之指引。',img:'' },
{ans:1,que:'下列何者非系統使用手冊該具備的基本要件？',ans1:'附有完整的原始程式，讓使用者能對系統的使用更熟稔',ans2:'操作程序敘述分明，使用者易於閱讀操作',ans3:'在資料維護的操作方面，對於應注意的事項，使用手冊應詳細記載',ans4:'附有系統整體的功能結構圖，讓使用者易於瞭解系統功能間的關係。',img:'' },
{ans:2,que:'下列那一項不是制定軟體生命週期的原因？',ans1:'便於管理',ans2:'節省經費',ans3:'便於權責的劃分',ans4:'建立標準，形成一套可遵循的程序。',img:'' },
{ans:4,que:'對測試工作的敘述下列何者錯誤？',ans1:'執行一個程式去找尋程式中錯誤的過程是測試工作的一種',ans2:'良好的測試，可以提昇程式的可信度',ans3:'良好的測試資料具有高度發現錯誤的可能性',ans4:'沒有發現錯誤的測試就是成功的測試。',img:'' },
{ans:1,que:'對資料檔的存取方式，下列何者為依序從媒體中將資料一筆接一筆的存取？',ans1:'循序存取檔(SAM)',ans2:'直接存取檔(DAM)',ans3:'索引循序檔(ISAM)',ans4:'虛擬記憶體存取檔(VSAM)。',img:'' },
{ans:4,que:'系統整合測試之目的，下列何者有誤？',ans1:'資料在經過不同模組介面時可能會消失',ans2:'個別模組時，可忍受之不精確，合併後會放大至不能接受地步',ans3:'全面性資料結構可能發生問題',ans4:'某個模組對其他模組一定會有不良影響。',img:'' },
{ans:1,que:'程式設計師在完成部分程式後即可予以測試，其使用方法為下列何者？',ans1:'程式中加入虛擬段落',ans2:'未完成部分優先跳過',ans3:'避免執行未完成部分',ans4:'使用現成程式取代之。',img:'' },
{ans:1,que:'下列何者不屬於資料流程圖的內容？',ans1:'事務流',ans2:'資料流',ans3:'資料儲存',ans4:'處理程序。',img:'' },
{ans:4,que:'下列何者不能有效協助程式在測試階段的除錯工作？',ans1:'採用結構化程式設計',ans2:'按流程圖追蹤程式邏輯',ans3:'減少複雜的邏輯判斷式',ans4:'減少使用副程式及函數呼叫。',img:'' },
{ans:3,que:'關於系統整合測試的方式，下列何者不正確？',ans1:'可分為由上而下和由下而上兩種方式',ans2:'由上而下測試方法的最大缺點是必須設計一個虛擬模組(Stub-Module)',ans3:'由下而上測試方法是一種漸增式的軟體結構組合法，沿著控制階層結構(Condition Hierarchy)，從主程式開始，以深度優先(Depth-First)或廣度優先(Breadth-First)的方式往下整合',ans4:'整合測試時，可採用由上而下及由下而上混合式的整合方式。',img:'' },
{ans:2,que:'在系統測試階段中，下列工作之順序應以何者為先？',ans1:'實施系統測試',ans2:'實施單元測試',ans3:'實施功能模組之間的整合測試',ans4:'實施驗收測試。',img:'' },
{ans:1,que:'系統整合測試發現錯誤時，不宜做下列何種處理？',ans1:'將所有程式全部刪除',ans2:'依據結果，研判錯誤發生之成因及所在',ans3:'查閱相關手冊，確定發生錯誤之原因',ans4:'使用偵錯程式，協助追蹤錯誤之所在。',img:'' },
{ans:1,que:'下列那一項不是資訊需求分析的方法？',ans1:'軟體測試',ans2:'詢問使用者',ans3:'由現行資訊系統中導出',ans4:'綜合使用系統之特性導出。',img:'' },
{ans:3,que:'測試程式時難免會有錯誤的結果，程式設計師必須藉由下列何者來與測試程式交互進行？',ans1:'遞迴',ans2:'流程圖',ans3:'除錯',ans4:'編譯。',img:'' },
{ans:1,que:'在軟體發展過程中，下列程序何者是用以發掘隱藏於程式中且尚未顯露之錯誤？',ans1:'測試',ans2:'除錯',ans3:'維護',ans4:'設計。',img:'' },
{ans:1,que:'由上而下整合測試(Top-Down Integration Testing)的最大缺點為何？',ans1:'需要有虛擬副程式，造成一些測試上的困難',ans2:'無法進行模組測試',ans3:'驅動程式設計困難',ans4:'要到最後一個模組整合進來，才可看到軟體的完整功能。',img:'' },
{ans:1,que:'系統整合測試最後進行的是數量測試(Volume Testing)，藉由此項測試，往往可以發現一些較少發生的錯誤，而數量測試所使用的資料量，以何者為佳？',ans1:'大量的真實資料',ans2:'小量的真實資料',ans3:'適中的真實資料',ans4:'資料量不影響測試結果，可以隨心所欲。',img:'' },
{ans:2,que:'系統測試是應用系統開發過程中，不可省略的一環。關於系統測試的方式，下列敘述何者不正確？',ans1:'先由每位程式設計師分別對自己所撰寫的部分，進行單元測試(Unit Testing)',ans2:'由一人專責系統測試的工作，免得因多頭馬車，徒增程式設計師的困擾',ans3:'系統測試的工作除了程式設計師必須參與外，亦應由數個不同的使用者做使用前的測試，以增加系統的穩定性',ans4:'系統測試應以真實的資料進行，以增進其適用性。',img:'' },
{ans:2,que:'下列何者不是軟體系統發展分析與設計工具？',ans1:'流程圖',ans2:'網路分佈圖',ans3:'結構圖',ans4:'決策表。',img:'' },
{ans:3,que:'「系統使用手冊」中不包含下列何者：',ans1:'系統功能',ans2:'輸入畫面',ans3:'檔案結構',ans4:'所需設備。',img:'' },
{ans:4,que:'關於系統使用手冊，下列何者錯誤？',ans1:'內容應說明系統的功能及作業方式',ans2:'封面應填列系統名稱，代號與製作人姓名',ans3:'目錄應列出說明書各項目及其頁次',ans4:'解釋各個程式的內容。',img:'' },
{ans:4,que:'那一類的說明書中必須將原始憑證的傳送及登錄方法詳細說明？',ans1:'系統說明書',ans2:'程式說明書',ans3:'操作說明書',ans4:'使用者說明書。',img:'' },
{ans:2,que:'以下那一項不是資料庫管理系統的型態？',ans1:'階層式(Hierarchical Approach)',ans2:'檔案式(File Approach)',ans3:'網路式(Network Approach)',ans4:'關聯式(Relational Approach)。',img:'' },
{ans:2,que:'系統分析師或程式設計師所製作的系統使用手冊不包含下列何項？',ans1:'系統概述',ans2:'程式維護記錄',ans3:'使用手冊目錄',ans4:'程式操作須知。',img:'' },
{ans:4,que:'下列何者是製作系統使用手冊時應避免之缺點？',ans1:'文字宜簡單，少用抽象及專門之名詞',ans2:'由整體到細部，由系統特點至一般功能',ans3:'提醒避免常犯之錯誤',ans4:'撰寫應具有專業眼光以及專家導向使手冊具有深度。',img:'' },
{ans:4,que:'系統使用手冊中，下列何者通常不列於批次作業？',ans1:'定期報表作業',ans2:'不定期報表作業',ans3:'工作流程安排作業',ans4:'線上查詢作業。',img:'' },
{ans:4,que:'以下何項不是資料庫管理師(DBA)的職責？',ans1:'決定資料庫的架構與資訊內容',ans2:'決定儲存結構和存取策略',ans3:'使用權的檢驗和核准程序',ans4:'開發前端應用程式。',img:'' },
{ans:4,que:'在系統分析階段，最主要的工作內容是資料蒐集與資料分析，下列敘述中哪一項較不適合做為資料蒐集的方式？',ans1:'使用單位相關報告、報表及程序手冊等書面資料',ans2:'與使用單位充份溝通的面談方式',ans3:'抽樣式的蒐集數量、成本、時間及其他相關資料',ans4:'依程式設計師的經驗分析。',img:'' },
{ans:4,que:'在軟體發展生命週期中，區分為許多階段，下列何者非軟體發展生命週期中之階段？',ans1:'分析(Analysis)',ans2:'程式撰寫(Coding)',ans3:'維護(Maintenance)',ans4:'查核(Review)。',img:'' },
{ans:3,que:'在系統開發的規劃階段中，對未來系統應如何進行開發，設定一些規則，下列何者非規劃階段中應建立者？',ans1:'時程',ans2:'人力需求',ans3:'設計方式',ans4:'應開發之範圍。',img:'' },
{ans:3,que:'在軟體的發展過程中，那兩個階段的人員不宜重覆？',ans1:'評估與設計',ans2:'設計與施行',ans3:'施行與測試',ans4:'測試與支援。',img:'' },
{ans:2,que:'以下何種分析圖是用來說明系統的資料關係？',ans1:'資料流程圖(Data Flow Diagram, DFD)',ans2:'實體-關係圖(Entity-Relationship Diagram, ERD)',ans3:'類別圖(Class Diagram)',ans4:'流程圖(Flow Chart)。',img:'' },
{ans:4,que:'下列對整合測試之敘述何者錯誤？',ans1:'在單元測試後執行',ans2:'策略上可由上而下(Top-Down)或由下而上(Bottom-Up)',ans3:'目的是測試各模組之整合上是否有問題',ans4:'由客戶來執行。',img:'' },
{ans:4,que:'以下何者不屬於使用者重視的軟體品質特性（非功能性需求）？',ans1:'可用性',ans2:'效率',ans3:'易用性',ans4:'資料庫存取。',img:'' },
{ans:4,que:'在分別對各個模組個別測試完畢後，便須進行所謂的整合測試，下列何者為最常用的作法？',ans1:'自上而下測試法及由左而右之測試法',ans2:'自下而上測試法及由右而左之測試法',ans3:'自上而下及自下而上混合測試法',ans4:'自上而下測試法、自下而上測試法及混合測試法。',img:'' },
{ans:3,que:'整合測試的執行程序可區分為兩種：一為非遞增式，針對各模組單獨測試後，再將其各模組合成加以測試；另一為遞增式，先測試單獨模組，然後逐一增加測試模組。有關遞增式測試程序之優點，下列何者為非？',ans1:'可以節省測試工作時間',ans2:'可以提早測試出模組介面之程式錯誤',ans3:'可以提前讓使用人員參與',ans4:'可以方便偵錯工作之展開。',img:'' },
{ans:3,que:'下列何者是一個軟體從某作業環境移到其他作業環境，所需耗費的工時，金錢等所做的評估？',ans1:'可測試性評估',ans2:'可靠性評估',ans3:'可攜性評估',ans4:'效率評估。',img:'' },
{ans:1,que:'程式設計人員要能正確掌握程式發展的進度。對於所要發展的程式應採取下列何種設計方式？',ans1:'由上而下',ans2:'由下而上',ans3:'由外而內',ans4:'由內而外。',img:'' },
{ans:3,que:'程式的撰寫和除錯在軟體發展生命週期中是屬於下列那一時期的工作內容？',ans1:'系統分析',ans2:'系統設計',ans3:'系統製作',ans4:'交付使用。',img:'' },
{ans:3,que:'下列何者不是使用軟體雛型(Prototype)的目的？',ans1:'釐清並使需求完整，當成「需求工具」',ans2:'探索其他設計途徑，當成「設計工具」',ans3:'設計資料庫結構與流程圖，當成「分析工具」',ans4:'逐漸成形定案產品，當成「建構工具」。',img:'' },
{ans:3,que:'資料流程圖之用途為何？',ans1:'系統設計',ans2:'程式撰寫',ans3:'系統分析',ans4:'撰寫測試報告。',img:'' },
{ans:2,que:'下列那一個軟體發展階段完成後，可產生功能規格？',ans1:'系統設計',ans2:'系統分析',ans3:'程式撰寫',ans4:'使用手冊撰寫。',img:'' },
{ans:2,que:'下列何者是在整個軟體發展過程中的先後順序？A.軟體設計B.系統分析C.程式撰寫 D.軟體測試 E.維護',ans1:'A,B,C,D,E',ans2:'B,A,C,D,E',ans3:'A,B,C,E,D',ans4:'B,A,C,E,D。',img:'' },
{ans:3,que:'軟體發展生命週期(Software Development Life Cycle)的過程，約可分為五個階段，其順序下列何者正確？',ans1:'系統規劃→系統建置→系統分析→系統發展→系統設計',ans2:'系統規劃→系統發展→系統建置→系統分析→系統設計',ans3:'系統規劃→系統分析→系統設計→系統發展→系統建置',ans4:'系統規劃→系統分析→系統發展→系統設計→系統建置。',img:'' },
{ans:2,que:'有關「軟體發展生命週期(SDLC)」之敘述，下列何者不正確？',ans1:'將系統的發展過程劃分為依序進行的幾個階段，並依照階層化的觀念，訂出各階段的工作項目',ans2:'每一個階段被視為一獨立之工作單位，與其他階段不相關',ans3:'階段的劃分有一定的模式',ans4:'用來控制軟體系統的發展，可以降低軟體危機所面臨問題的嚴重性。',img:'' },
{ans:1,que:'在軟體發展生命週期(SDLC)中，可行性研究是下列那一個階段所完成的工作？',ans1:'規劃',ans2:'分析',ans3:'實體設計',ans4:'製作。',img:'' },
{ans:2,que:'下列何者不屬於「軟體危機」(Software Crisis)所涵蓋的問題？',ans1:'軟體產品和使用者需求不符',ans2:'缺乏軟體公司',ans3:'軟體品質的好壞甚難判定',ans4:'軟體維護工作極為困難。',img:'' },
{ans:1,que:'對於整合測試，下列何者錯誤？',ans1:'必須在整個系統發展完成後才開始測試',ans2:'當懷疑系統有錯誤時，可以在工作環境直接測試，而不影響實際資料的正確性',ans3:'系統可以遞增方式測試，逐步由一個模組擴增至整個系統',ans4:'由上而下的整合測試缺點為低層模組的錯誤會較晚發現。',img:'' },
{ans:4,que:'系統測試過程中，下列何者不屬於系統發展測試？',ans1:'個別程式測試',ans2:'程式整合測試',ans3:'系統驗收測試',ans4:'專案計畫測試。',img:'' },
{ans:3,que:'系統發展專案中，負責在預定的專案範圍、有限的時間、預算與人力資源間，取得平衡是下列何者的職責？',ans1:'程式設計師',ans2:'系統分析師',ans3:'專案經理',ans4:'網路管理師。',img:'' },
{ans:1,que:'系統使用文件至少應包括下列那些資料？',ans1:'操作者指引(Operator s Guide)與使用者指引(User s Guide)',ans2:'硬體維護(Hardware Maintenance)與軟體維護(Software Maintenance)',ans3:'系統分析(System Analysis)與系統設計(SystemDesign)',ans4:'資料庫結構(Database Structure)與評估報告(Evaluation Report)。',img:'' },
{ans:3,que:'下列何者不屬於程式說明的文件？',ans1:'程式流程圖',ans2:'螢幕設計及說明',ans3:'各項代碼及編號方法說明',ans4:'報表格式及說明。',img:'' },
{ans:3,que:'一般經常以HIPO 圖作為說明程式內容的工具，它應包含下列四項中的那二項？1.模組內容表(VTOC)2.結構圖(SC)3.輸入、處理及輸出表(IPO)4.系統流程圖(System Flow Chart)',ans1:'1,2',ans2:'2,3',ans3:'1,3',ans4:'3,4。',img:'' },
{ans:4,que:'下列何者不是需求驗證的目的？',ans1:'確定軟體需求規格正確說明系統的行為和特色',ans2:'確定已從系統需求或其他來源中正確地導出軟體需求',ans3:'確認需求適於進行產品設計、建構與測試工作',ans4:'確認專案的收費金額。',img:'' },
{ans:4,que:'每個軟體系統的建立，都要歷經許多步驟方能完成，這些步驟不包含下列何者？',ans1:'系統分析',ans2:'系統設計',ans3:'系統發展',ans4:'系統展示。',img:'' },
{ans:1,que:'下列何者不是使用資料庫的好處？',ans1:'節省專案開發經費',ans2:'確保資料的獨立性',ans3:'讓多數的使用者、程式間能夠共享資料',ans4:'資料的統一管理。',img:'' },
{ans:3,que:'軟體發展生命週期(SDLC)中，下列何者不屬於程式測試的範圍？',ans1:'單元測試',ans2:'整合測試',ans3:'完成I/O 設計',ans4:'程式除錯。',img:'' },
{ans:3,que:'軟體發展過程中，有關資料庫的定義與設計是下列何者的職掌？',ans1:'系統分析師',ans2:'程式設計師',ans3:'資料庫管理師',ans4:'軟體使用部門主管。',img:'' },
{ans:2,que:'在軟體發展生命週期的各階段中，下列何者決定軟體之需求規格？',ans1:'可行性評估',ans2:'資訊需求分析',ans3:'實體系統設計',ans4:'系統建置與維護。',img:'' },
{ans:1,que:'下列何者為系統分析之主要目的？',ans1:'研究系統的需求，研訂可行方案',ans2:'依步驟上線實施',ans3:'評量實施成效',ans4:'發展程式軟體。',img:'' },
{ans:4,que:'下列何者不是軟體生命週期中發展階段的步驟？',ans1:'根據軟體需求設計一套模組',ans2:'考慮每一個模組內部的執行程序',ans3:'根據模組來撰寫程式及測試',ans4:'根據模組來做維護。',img:'' },
{ans:3,que:'在軟體發展生命週期中，將規劃層面產生的需求規格轉變為實際之軟體是屬於那一階段？',ans1:'啟蒙階段',ans2:'規劃階段',ans3:'發展階段',ans4:'維護階段。',img:'' },
{ans:2,que:'下列何者是連結伺服端的資料庫系統與用戶端應用程式間的軟體？',ans1:'測試軟體(Testing Software)',ans2:'中介軟體(Middleware)',ans3:'公用程式(Utility)',ans4:'建構管理軟體(Configuration Management Software)。',img:'' },
{ans:3,que:'軟體發展生命週期之主要步驟有：1.可行性研究2.系統設計3.系統分析4.系統實施 5.系統維護6.系統測試，請按先後順序排出',ans1:'1,2,3,4,5,6',ans2:'1,3,2,4,5,6',ans3:'1,3,2,4,6,5',ans4:'1,2,3,5,6,4。',img:'' },
{ans:4,que:'在可行性研究時，下列何者不需考慮？',ans1:'事實是什麼？',ans2:'使用者的需要是什麼？',ans3:'解決問題需要做什麼？',ans4:'如何解決問題？。',img:'' },
{ans:3,que:'關於軟體發展的生命週期(SDLC)的敘述，下列何者錯誤？',ans1:'SDLC 意指軟體系統的開發階段與過程',ans2:'系統發展須有嚴明之階段',ans3:'前一階段未完成，可視情況許可，先進行下一階段工作',ans4:'某一階段必須有產品來顯示已告一段落。',img:'' },
{ans:4,que:'關於結構化程式設計的觀念，下列何者不是其優點？',ans1:'是一種由上而下的設計方法',ans2:'將程式分解成多數個具有獨立功能的模組',ans3:'每個模組功能單元自成一段程式',ans4:'不需要做整合測試的一種程式設計方法。',img:'' },
{ans:3,que:'下列那一項是軟體發展生命週期中，首要的優先步驟？',ans1:'系統測試',ans2:'系統分析',ans3:'可行性研究',ans4:'程式製作。',img:'' },
{ans:4,que:'在軟體發展的生命週期中，耗費時間最長的是那一個階段？',ans1:'系統分析',ans2:'程式製作',ans3:'系統測試',ans4:'系統維護。',img:'' },
{ans:3,que:'對於軟體發展生命週期(SDLC)之觀念，下列何者不正確？',ans1:'是軟體工程的一個概念，用來描述軟體的生命',ans2:'軟體發展生命週期各階段的劃分，並非一成不變的',ans3:'軟體的生命週期由使用者決定',ans4:'每一階段完成之後必須進行檢討並且完成各種文件。',img:'' },
{ans:1,que:'軟體雛型法是一種軟體開發方法，初期先建立一可以使用之動態模型，讓使用者反覆使用，再逐漸調整以符合使用者需求，進而成為一個成功的產品。有關軟體雛型法下列敘述何者正確？',ans1:'幫助使用者了解系統並提出完整的需求',ans2:'因其過程繁複，必然導致軟體開發與維護成本提高',ans3:'因為使用者之參與，軟體預算易被刪減',ans4:'常導至使用者需求，無限制地增加。',img:'' },
{ans:3,que:'在軟體發展生命週期最後之維護階段通常費時最久，成本也最高，其形成原因相當多，下列何者並非其中之一？',ans1:'分析時未全盤了解使用者需求',ans2:'軟體文件(如程式說明書)不全',ans3:'維護人員偷懶',ans4:'程式設計不夠結構化。',img:'' },
{ans:2,que:'軟體專家提出軟體工程理論與軟體發展方法是為了解決下列那一個問題？',ans1:'軟體計價問題',ans2:'軟體危機',ans3:'軟體智慧財產權問題',ans4:'軟體行銷問題。',img:'' },
{ans:4,que:'以下何者不是軟體需求分析階段的工作？',ans1:'需求取得',ans2:'分析',ans3:'訂定規格',ans4:'系統維護。',img:'' },
{ans:2,que:'對於軟體發展生命週期(SDLC)的敘述，以下何者正確？',ans1:'驗證階段是屬於第二階段',ans2:'需求分析階段應最先處理',ans3:'第一步驟是系統測試',ans4:'最後一個步驟是程式撰寫。',img:'' },
{ans:3,que:'對於軟體發展生命週期(SDLC',img:'' },
{ans:3,que:'對於軟體發展生命週期(SDLC',img:'' },
{ans:1,que:'對於軟體發展生命週期(SDLC',img:'' },
{ans:4,que:'對於軟體發展生命週期(SDLC)的階段，必須考量購買套裝軟體或委外開發等選擇方案供客戶選擇，是那一個階段？',ans1:'系統建置階段',ans2:'初步設計階段',ans3:'系統驗證階段',ans4:'需求分析階段。',img:'' },
{ans:4,que:'在軟體發展生命週期(SDLC)中，系統建置(System Installation)不包括以下何者？',ans1:'教育訓練',ans2:'準備系統設備',ans3:'轉換資料檔案',ans4:'證明系統完全無誤。',img:'' },
{ans:2,que:'在軟體發展生命週期(SDLC)中，系統建置(System Installation)不包括以下何者？',ans1:'安全稽核',ans2:'訂定清楚的規格',ans3:'系統運作評估',ans4:'系統維護。',img:'' },
{ans:4,que:'系統發展過程的敘述，以下何者正確？',ans1:'必須先完成系統設計，才開始對此系統進行分析',ans2:'必須驗證使用者需求無誤，才能進行系統設計',ans3:'初步設計必須設計資料結構與演算法則',ans4:'程式撰寫必須對系統進行驗證。',img:'' },
{ans:1,que:'資訊系統發展過程中，業務知識所佔比率較資訊技術為重的是那一個階段？',ans1:'需求取得階段',ans2:'系統設計階段',ans3:'系統建置階段',ans4:'系統維護階段。',img:'' },
{ans:1,que:'要使軟體專案的開發與需求同步，必須執行以下那一個活動？',ans1:'需求規格標示更新版本的記錄',ans2:'要求使用者參與系統測試',ans3:'程式加上註解',ans4:'多人共同開發。',img:'' },
{ans:1,que:'有關系統設計與發展，以下何者敘述正確？',ans1:'使用者的參與，是系統發展成功的重要因素之一',ans2:'系統設計的項目中，不包含硬體設計',ans3:'軟體開發時發生設計錯誤，為了達成預定進度，不要回頭修正',ans4:'系統開發務求正確，可以慢慢設計，不需要理會預定的進度。',img:'' },
{ans:1,que:'有關系統發展的敘述，以下何者正確？',ans1:'系統規劃無法從單一角度瞭解全盤需求，需要合併文字與圖形來表達',ans2:'為節省專案開發的時間，在規劃需求時，編撰詞彙及定義應用程式開發領域使用的特殊術語是多餘的工作',ans3:'需求的變更不需經過可行性的探討，可任意進行設計或採用',ans4:'流程圖(Flow chart)是結構化分析(StructuredAnalysis)最常採用的工具。',img:'' },
{ans:2,que:'物件導向技術採用的統一流程方法(Unified Process)，不包含以下那一個階段？',ans1:'初始(Inception)階段',ans2:'規劃(Planning)階段',ans3:'建構(Construction)階段',ans4:'移交(Transition)階段。',img:'' },
{ans:1,que:'系統設計時應劃分不同子系統(Subsystems)，以下何者正確？',ans1:'子系統之間的相關性愈小愈好',ans2:'子系統之間不能有相關性',ans3:'子系統之間相關性越大越好',ans4:'子系統內部相關性越小越好。',img:'' },
{ans:3,que:'關於目前軟體發展的趨勢，以下何者錯誤？',ans1:'朝向元件化發展',ans2:'朝向多層式(Multi-Tier)的架構',ans3:'朝向緊密式關連',ans4:'朝向網際網路系統。',img:'' },
{ans:4,que:'有關繪製流程圖(Flow Chart)的敘述，以下何者錯誤？',ans1:'對各項工作應明確定義',ans2:'開始與結束工作必須明確界定',ans3:'每一步驟皆須排序，依次執行',ans4:'是需求規格訂定不可或缺的工具。',img:'' },
{ans:4,que:'有關繪製流程圖(Flow Chart)的敘述，以下何者錯誤？',ans1:'流程圖上至少有一個邏輯上的終點',ans2:'流程圖上判斷符號，例如IF 指令敘述至少有兩條向外的流線',ans3:'終止符號不能有向外的流線',ans4:'平行處理的符號是雙向箭頭。',img:'' },
{ans:4,que:'製作資料流程圖(Data Flow Diagram, DFD)的目的，以下何者錯誤？',ans1:'定義系統資料傳遞的過程',ans2:'描述系統操作需具備的資料',ans3:'定義與外界流通的資料',ans4:'定義外部系統發生過程的處理。',img:'' },
{ans:4,que:'有關結構化程式設計的敘述，以下何者錯誤？',ans1:'可以增進程式的易讀性',ans2:'可以增進程式的易維護性',ans3:'最好使用結構化分析(Structured Analysis)技術',ans4:'可以節省程式撰寫的時間一半以上。',img:'' },
{ans:3,que:'以下何者不屬於資訊系統開發中設計階段的工作？',ans1:'繪製流程圖(Flow Chart)',ans2:'撰寫演算法虛擬碼(PseudoCode)',ans3:'訪談使用者',ans4:'報表格式設計。',img:'' },
{ans:3,que:'有關軟體雛型(Prototype)的敘述，以下何者正確？',ans1:'雛型是一個完全不能執行的電腦系統模組',ans2:'若系統開發時建構軟體雛型，可以省略書面軟體需求規格的撰寫',ans3:'建構軟體雛型是降低客戶對系統不滿意，及早瞭解使用者的回應的好辦法。',ans4:'建構軟體雛型會提高失敗的風險。',img:'' },
{ans:2,que:'系統分析師之主要工作，以下何者錯誤？',ans1:'找出並確認使用者需求',ans2:'軟體系統演算法則評估',ans3:'軟體系統之規劃與設計',ans4:'擔任使用者與系統相關人員間之溝通角色。',img:'' },
{ans:4,que:'以下那一項不是物件導向(Object-orientation)技術的特性？',ans1:'抽像化(Abstraction)',ans2:'繼承(Inheritance)',ans3:'封裝(Encapsulation)',ans4:'分割(Decomposition)。',img:'' },
{ans:4,que:'以物件導向技術設計一個類別(Class)時，其內容不包含以下何者？',ans1:'類別名稱(Name)',ans2:'類別屬性(Attributes)',ans3:'類別方法(Methods)',ans4:'類別註解(Comment)。',img:'' },
{ans:2,que:'以物件導向技術設計資訊系統的類別(Class)圖，可以描述系統的那一個部分？',ans1:'硬體配置關係',ans2:'系統元件間的靜態關係',ans3:'系統動態行為與演算法',ans4:'外部系統的功能。',img:'' },
{ans:2,que:'以物件導向技術設計一個類別(Class)B 繼承類別A，則B 可以繼承類別A 的那一個部分？',ans1:'名稱(Name)',ans2:'方法(Methods)或功能',ans3:'註解(Comment )',ans4:'角色(Role)。',img:'' },
{ans:1,que:'程式撰寫時，以下那一個原則正確？',ans1:'結構化程式應避免使用GOTO 指令',ans2:'用組合語言撰寫程式時，多使用記憶體存取指令，而不使用存取暫存器的指令，可提昇程式執行效率',ans3:'程式撰寫時應採用系統提供的特殊函數，以增進程式執行的效能',ans4:'程式註解對程式執行不會發生任何影響，應盡量不使用。',img:'' },
{ans:4,que:'有關程式設計規格的撰寫，以下何者錯誤？',ans1:'遞迴(Recursive)之使用會增加程式除錯之困難',ans2:'需要滿足系統分析規格',ans3:'可以作為單元測試的依據',ans4:'實體關係圖(Entity-Relation Diagram)是一個很常使用的工具。',img:'' },
{ans:4,que:'開發人員所重視的軟體品質特性，不包括下列何者？',ans1:'可維護性',ans2:'可攜性',ans3:'可再用性',ans4:'可分析性。',img:'' },
{ans:3,que:'由下而上的系統整合測試(System Bottom-Up Integration Testing)的最大缺點為何？',ans1:'難以找到個別模組缺點',ans2:'延後許多下層模組真實的測試',ans3:'要到最後一個模組整合進來，才可看到軟體的完整功能',ans4:'增加開發殘根(Stub)模組的成本。',img:'' },
{ans:3,que:'整合測試之主要目的是以下何者？',ans1:'確認系統功能是否合乎使用者的需求',ans2:'確認系統的可靠度',ans3:'確認模組間介面一致性問題，測試軟體整體功能',ans4:'通過使用者驗收。',img:'' },
{ans:2,que:'進行整合測試前，需先完成以下那一種測試？',ans1:'系統測試',ans2:'單元測試',ans3:'壓力測試',ans4:'灰箱測試。',img:'' },
{ans:4,que:'驗收測試應由誰來執行？',ans1:'系統設計者',ans2:'系統分析者',ans3:'程式撰寫者',ans4:'系統使用者。',img:'' },
{ans:1,que:'對於系統測試的敘述，以下何者正確？',ans1:'完成系統測試後，仍無法保證該系統在執行時百分之百正確',ans2:'系統測試可以找出系統分析師的所有系統分析錯誤',ans3:'系統測試可以完全找出程式撰寫時產生的錯誤',ans4:'系統測試目的在找出軟體模組之間介面溝通的錯誤。',img:'' },
{ans:4,que:'在軟體測試中，通常先進行系統測試，測試機器硬體可否配合後，再進行以下那一種測試？',ans1:'整合測試',ans2:'單元測試',ans3:'白箱測試',ans4:'驗收測試。',img:'' },
{ans:2,que:'有關軟體測試的敘述，以下何者正確？',ans1:'商用套裝程式已經過發行者進行軟體測試，所以使用者不必再予以測試',ans2:'通常模組測試完成後，才會進行整合測試',ans3:'在軟體系統開發測試時，程式設計師必須負責完成整個測試工作，包括單元測試及系統測試',ans4:'在軟體發展生命週期中，若時間不夠，可以省略測試工作。',img:'' },
{ans:3,que:'有關軟體測試的敘述，以下何者錯誤？',ans1:'製作程式時，為使程式順利執行，程式在未執行前，可利用桌上檢查(Desk Check)先行除錯',ans2:'製作程式時，若程式執行有誤時，可將適當變數內的值列印出來，以便除錯',ans3:'軟體測試發現的錯誤已交由開發者修正，不需要再重新予以測試',ans4:'製作程式時，可利用一些系統提供的程式軟體，加速除錯的進行。',img:'' },
{ans:2,que:'軟體壓力測試是以下那一種測試？',ans1:'單元測試',ans2:'系統測試',ans3:'整合測試',ans4:'白箱測試。',img:'' },
{ans:1,que:'軟體測試中，測試對使用者個數的容忍程度屬於以下那一種測試？',ans1:'壓力測試',ans2:'相容性測試',ans3:'整合測試',ans4:'驗收測試。',img:'' }]